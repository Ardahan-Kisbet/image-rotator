{"version":3,"sources":["components/Navbar.js","components/Sidebar.js","scripts/imageRotation.js","components/ImagePanel.js","components/Content.js","App.js","index.js"],"names":["Navbar","className","Sidebar","props","useState","defaultFile","name","fileName","setFileName","width","setWidth","height","setHeight","angle","setAngle","canvasRef","useRef","canvas","setCanvas","initialized","setInitialized","useEffect","current","load","source","img","Image","src","onload","getContext","drawImage","imageData","getImageData","loadImageData","process","id","type","value","onClick","document","getElementById","click","accept","onChange","raw","target","files","length","file","match","reader","FileReader","readAsDataURL","evt","readyState","DONE","result","hidden","ref","style","display","maxLength","size","e","tryRotate","htmlFor","checked","outlined","setOutlined","rotate","image","radian","Math","PI","abs","data","Error","sizeDiff","sin","sinValue","newWidth","round","newHeight","newPixelArray","Uint8ClampedArray","offsetX","offsetY","originX","originY","y","x","currIdx","newPoint","rotatePoint","X","Y","destIdx","ImageData","xPrime","cos","yPrime","util","Canvas","BackupData","Init","Clear","ReDraw","putImageData","Rotate","setRenderTime","setRotateAngle","ctx","start","performance","now","end","err","alert","message","clearRect","Recall","ImagePanel","renderTime","rotateAngle","loadedImageData","rotated","setRotated","border","defaultFileInfo","Content","setLoadedImageData","parsed","parseInt","isNaN","Number","isInteger","App","ReactDOM","render","StrictMode"],"mappings":"6SAWeA,MARf,WACE,OACE,qBAAKC,UAAU,SAAf,SACE,kD,aCoJSC,MAvJf,SAAiBC,GAAQ,IAAD,EACUC,mBAASD,EAAME,YAAYC,MADrC,mBACfC,EADe,KACLC,EADK,OAEIJ,mBAASD,EAAME,YAAYI,OAF/B,mBAEfA,EAFe,KAERC,EAFQ,OAGMN,mBAASD,EAAME,YAAYM,QAHjC,mBAGfA,EAHe,KAGPC,EAHO,OAIIR,mBAAS,GAJb,mBAIfS,EAJe,KAIRC,EAJQ,KAMhBC,EAAYC,iBAAO,MANH,EAOMZ,mBAAS,MAPf,mBAOfa,EAPe,KAOPC,EAPO,OAQgBd,oBAAS,GARzB,mBAQfe,EARe,KAQFC,EARE,KAUtBC,qBAAU,WAERH,EAAUH,EAAUO,WACnB,IAEH,IA0BMC,EAAO,SAACC,GACZ,GAAIA,EAAQ,CACV,IAAIC,EAAM,IAAIC,MACdD,EAAIE,IAAMH,EACVC,EAAIG,OAAS,WAEXX,EAAOR,MAAQgB,EAAIhB,MACnBQ,EAAON,OAASc,EAAId,OAGpBM,EAAOY,WAAW,MAAMC,UAAUL,EAAK,EAAG,GAC1C,IAAMM,EAAYd,EACfY,WAAW,MACXG,aAAa,EAAG,EAAGf,EAAOR,MAAOQ,EAAON,QAC3CR,EAAM8B,cAAcF,GAGpBrB,EAASe,EAAIhB,OACbG,EAAUa,EAAId,WAgBpB,OALKQ,GAAeF,IAClBM,EAAKW,8BACLd,GAAe,IAIf,sBAAKnB,UAAU,UAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,uBACEkC,GAAG,oBACHlC,UAAU,yBACVmC,KAAK,SACLC,MAAM,eACNC,QApEkB,WAExBC,SAASC,eAAe,eAAeH,MAAQ,KAG/CE,SAASC,eAAe,eAAeC,WAiEnC,uBACEN,GAAG,cACHC,KAAK,OACLM,OAAO,UACPC,SAlEe,SAACC,GACtB,GAAIA,GAAmC,IAA5BA,EAAIC,OAAOC,MAAMC,OAAc,CACxC,IAAIC,EAAOJ,EAAIC,OAAOC,MAAM,GAC5B,GAAIE,EAAKZ,KAAKa,MAAM,WAAY,CAE9B,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,cAAcJ,GACrBE,EAAOtB,OAAS,SAAUyB,GACpBA,EAAIR,OAAOS,aAAeH,WAAWI,OACvChC,EAAK8B,EAAIR,OAAOW,QAChBhD,EAAYwC,EAAK1C,WAyDnBmD,QAAM,IAER,wBAAQC,IAAK3C,EAAW4C,MAAO,CAAEC,QAAS,aAG5C,qBAAK3D,UAAU,oBAEf,sBAAKA,UAAU,uBAAf,UACE,gCACE,+BACE,yCAEF,+BAAOM,OAET,gCACE,+BACE,yCAEF,+BAAOE,OAET,gCACE,+BACE,0CAEF,+BAAOE,OAET,gCACE,+BACE,0CAEF,iCACE,uBACEwB,GAAG,aACHC,KAAK,OACLyB,UAAU,IACVC,KAAK,IACLnB,SAAU,SAACoB,GAAD,OAAOjD,EAASiD,EAAElB,OAAOR,UAErC,uBACED,KAAK,SACLnC,UAAU,yBACVoC,MAAM,QACNC,QAnEY,WACtBnC,EAAM6D,UAAUnD,YAsEZ,sBAAKZ,UAAU,eAAf,UAEE,uBAAOgE,QAAQ,kBAAf,sBACA,uBACE7B,KAAK,WACLD,GAAG,kBACH+B,QAAS/D,EAAMgE,SACfxB,SAAU,SAACoB,GAAD,OAAO5D,EAAMiE,YAAYL,EAAElB,OAAOqB,sB,MCzGxD,SAASG,EAAOC,EAAOzD,GAErB,IAAI0D,EAAyB1D,GAyFZ2D,KAAKC,GAAK,KArF3B,GAAyB,IAArBD,KAAKE,IAAIH,GACX,OAAOD,EAGT,GAAIA,EAAMK,KAAK5B,OAAS,IAAMuB,EAAM7D,MAAQ6D,EAAM3D,OAChD,MAAM,IAAIiE,MACR,yFAsBJ,IAjBA,IAAMC,EAAWL,KAAKE,IAAIF,KAAKM,IAAIN,KAAKC,GAAK,EAAIF,IAC3CQ,EAAWP,KAAKE,IAAIF,KAAKM,IAAIP,IAC/BS,EAAWR,KAAKS,MAAMX,EAAM7D,MAAQoE,EAAWP,EAAM3D,OAASoE,GAC9DG,EAAYV,KAAKS,MAAMX,EAAM3D,OAASkE,EAAWP,EAAM7D,MAAQsE,GAE7DI,EAAgB,IAAIC,kBAAkBJ,EAAWE,EAAY,GAG7DG,EAAUb,KAAKS,OAAOD,EAAWV,EAAM7D,OAAS,GAChD6E,EAAUd,KAAKS,OAAOC,EAAYZ,EAAM3D,QAAU,GAIlD4E,EAAUf,KAAKS,MAAMX,EAAM7D,MAAQ,GACnC+E,EAAUhB,KAAKS,MAAMX,EAAM3D,OAAS,GAGjC8E,EAAI,EAAGA,EAAInB,EAAM3D,SAAU8E,EAClC,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,EAAM7D,QAASiF,EAAG,CAEpC,IAAIC,EAAkC,GAAvBD,EAAID,EAAInB,EAAM7D,OAGzBmF,EAAWC,EACbH,EACAD,EACAF,EACAC,EACAjB,EACAc,EACAC,GAUF,GALEM,EAASE,GAAK,GACdF,EAASE,EAAId,GACbY,EAASG,GAAK,GACdH,EAASG,EAAIb,EAEF,CACX,IAAIc,EAAiD,GAAtCJ,EAASE,EAAIF,EAASG,EAAIf,GACzCG,EAAca,EAAU,GAAK1B,EAAMK,KAAKgB,EAAU,GAClDR,EAAca,EAAU,GAAK1B,EAAMK,KAAKgB,EAAU,GAClDR,EAAca,EAAU,GAAK1B,EAAMK,KAAKgB,EAAU,GAClDR,EAAca,EAAU,GAAK1B,EAAMK,KAAKgB,EAAU,IAMxD,OAAO,IAAIM,UAAUd,EAAeH,EAAUE,GAIhD,SAASW,EAAYH,EAAGD,EAAGF,EAASC,EAASjB,GAAmC,IAA3Bc,EAA0B,uDAAhB,EAAGC,EAAa,uDAAH,EACtEY,GACDR,EAAIH,GAAWf,KAAK2B,IAAI5B,IAAWkB,EAAID,GAAWhB,KAAKM,IAAIP,GAC9D2B,GAAUX,EACV,IAAIa,GACDV,EAAIH,GAAWf,KAAKM,IAAIP,IAAWkB,EAAID,GAAWhB,KAAK2B,IAAI5B,GAS9D,OARA6B,GAAUZ,EAGVU,GAAUb,EACVe,GAAUd,EAIH,CAAEQ,EAAGtB,KAAKS,MAAMiB,GAASH,EAAGvB,KAAKS,MAAMmB,ICvGhD,IAAMC,EAAO,CACXC,OAAQ,KACRC,WAAY,KACZC,KAAM,SAACzF,GACLsF,EAAKC,OAASvF,EACdsF,EAAKI,SAEPC,OAAQ,SAAC3E,GAEHA,IACFsE,EAAKE,WAAaxE,EAClBsE,EAAKI,QACLJ,EAAKC,OAAO7F,MAAQsB,EAAUtB,MAC9B4F,EAAKC,OAAO3F,OAASoB,EAAUpB,OACnB0F,EAAKC,OAAOzE,WAAW,MAC/B8E,aAAa5E,EAAW,EAAG,KAInC6E,OAAQ,SAAC/F,EAAOgG,EAAeC,GAG7B,IACInC,EADEoC,EAAMV,EAAKC,OAAOzE,WAAW,MAGjC8C,EADE0B,EAAKE,WACAF,EAAKE,WAELQ,EAAI/E,aAAa,EAAG,EAAGqE,EAAKC,OAAO7F,MAAO4F,EAAKC,OAAO3F,QAG/D,IAAMqG,EAAQC,YAAYC,MACtBC,EAAMH,EACV,IACE,IAAIxD,EAASa,EAAOM,EAAM9D,GAC1BsG,EAAMF,YAAYC,MAClBb,EAAKI,QACLJ,EAAKC,OAAO7F,MAAQ+C,EAAO/C,MAC3B4F,EAAKC,OAAO3F,OAAS6C,EAAO7C,OAE5BoG,EAAIJ,aAAanD,EAAQ,EAAG,GAC5BqD,EAAcM,EAAMH,GACpBF,EAAejG,GACf,MAAOuG,GACPC,MAAMD,EAAIE,WAGdb,MAAO,WAELJ,EAAKC,OAAOzE,WAAW,MAAM0F,UAC3B,EACA,EACAlB,EAAKC,OAAO7F,MACZ4F,EAAKC,OAAO3F,SAGhB6G,OAAQ,WAEFnB,EAAKE,YACPF,EAAKK,OAAOL,EAAKE,cAgDRkB,MA3Cf,SAAoBtH,GAAQ,IAAD,EACOC,oBAAS,GADhB,mBAClB+D,EADkB,KACRC,EADQ,OAEWhE,mBAAS,GAFpB,mBAElBsH,EAFkB,KAENb,EAFM,OAGazG,mBAAS,GAHtB,mBAGlBuH,EAHkB,KAGLb,EAHK,KAKnB/F,EAAYC,iBAAO,MAyBzB,OAvBAK,qBAAU,WAERgF,EAAKG,KAAKzF,EAAUO,WACnB,IAGHD,qBAAU,WACR+C,EAAYjE,EAAMgE,YACjB,CAAChE,EAAMgE,WAGV9C,qBAAU,WACRgF,EAAKK,OAAOvG,EAAMyH,mBACjB,CAACzH,EAAMyH,kBAEVvG,qBAAU,WACHlB,EAAM0H,UACTxB,EAAKO,OAAOzG,EAAMwH,YAAad,EAAeC,GAC9C3G,EAAM2H,YAAW,MAGlB,CAAC3H,IAGF,sBAAKF,UAAU,iBAAf,UACE,wBACEkC,GAAG,WACHuB,IAAK3C,EACL4C,MAAO,CAAEoE,OAAQ5D,EAAW,gBAAkB,UAEhD,sBAAKhC,GAAG,aAAR,0BAAmCuF,EAAnC,kBACA,sBAAKvF,GAAG,cAAR,sBAAgCwF,EAAhC,iBCxHAK,G,MAAkB,CAAE1H,KAAM,cAAeG,MAAO,IAAKE,OAAQ,MA4CpDsH,MA1Cf,WAAoB,IAAD,EACe7H,oBAAS,GADxB,mBACV+D,EADU,KACAC,EADA,OAE6BhE,mBAAS,MAFtC,mBAEVwH,EAFU,KAEOM,EAFP,OAGqB9H,mBAAS,MAH9B,mBAGVuH,EAHU,KAGGb,EAHH,OAIa1G,oBAAS,GAJtB,mBAIVyH,EAJU,KAIDC,EAJC,KAmBjB,OACE,sBAAK7H,UAAU,UAAf,UAEE,cAAC,EAAD,CACEgC,cAAeiG,EACf7H,YAAa2H,EACbhE,UAlBY,SAACnD,GACjB,IAAIsH,EAASC,SAASvH,IACjBwH,MAAMF,IAAWG,OAAOC,UAAUJ,IACrCrB,EAAeqB,GAGfL,GAAW,IAEXT,MAAM,uCAWJjD,YAAaA,EACbD,SAAUA,IAIZ,cAAC,EAAD,CACEyD,gBAAiBA,EACjBzD,SAAUA,EACVwD,YAAaA,EACbE,QAASA,EACTC,WAAYA,QC9BLU,MATf,WACE,OACE,sBAAKvI,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCHNwI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpG,SAASC,eAAe,W","file":"static/js/main.9d4c8a9a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Navbar.css\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <h3>Image Rotator</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport \"../styles/Sidebar.css\";\r\n\r\nfunction Sidebar(props) {\r\n  const [fileName, setFileName] = useState(props.defaultFile.name);\r\n  const [width, setWidth] = useState(props.defaultFile.width);\r\n  const [height, setHeight] = useState(props.defaultFile.height);\r\n  const [angle, setAngle] = useState(0);\r\n  // we have to use a ref, which is a reference to the actual canvas DOM element.\r\n  const canvasRef = useRef(null);\r\n  const [canvas, setCanvas] = useState(null);\r\n  const [initialized, setInitialized] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Initialize Canvas State, this will be called only once\r\n    setCanvas(canvasRef.current);\r\n  }, []);\r\n\r\n  const triggerFileUpload = () => {\r\n    // reset previous file value to enable loading same file again and again\r\n    document.getElementById(\"imageLoader\").value = null;\r\n\r\n    // trigger input file to open file browser\r\n    document.getElementById(\"imageLoader\").click();\r\n  };\r\n\r\n  const tryToLoadImage = (raw) => {\r\n    if (raw && raw.target.files.length !== 0) {\r\n      let file = raw.target.files[0];\r\n      if (file.type.match(\"image.*\")) {\r\n        // then we have a image, load it!\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = function (evt) {\r\n          if (evt.target.readyState === FileReader.DONE) {\r\n            load(evt.target.result);\r\n            setFileName(file.name);\r\n          }\r\n        };\r\n      }\r\n    }\r\n  };\r\n\r\n  // to load given file source as image\r\n  const load = (source) => {\r\n    if (source) {\r\n      let img = new Image();\r\n      img.src = source;\r\n      img.onload = function () {\r\n        // rearrange canvas size according to loaded image\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n\r\n        // send loaded image's data file to upper component\r\n        canvas.getContext(\"2d\").drawImage(img, 0, 0);\r\n        const imageData = canvas\r\n          .getContext(\"2d\")\r\n          .getImageData(0, 0, canvas.width, canvas.height);\r\n        props.loadImageData(imageData);\r\n\r\n        // set data for file information area\r\n        setWidth(img.width);\r\n        setHeight(img.height);\r\n      };\r\n    }\r\n    // Else: invalid source, do nothing\r\n  };\r\n\r\n  const btnApplyOnClick = () => {\r\n    props.tryRotate(angle);\r\n  };\r\n\r\n  // set default image on initialization\r\n  if (!initialized && canvas) {\r\n    load(process.env.PUBLIC_URL + \"/default.png\");\r\n    setInitialized(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sideBarSectionTop\">\r\n        <input\r\n          id=\"uploadImageButton\"\r\n          className=\"btn btn-blue btn-large\"\r\n          type=\"button\"\r\n          value=\"Upload Image\"\r\n          onClick={triggerFileUpload}\r\n        />\r\n        <input\r\n          id=\"imageLoader\"\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          onChange={tryToLoadImage}\r\n          hidden\r\n        />\r\n        <canvas ref={canvasRef} style={{ display: \"none\" }}></canvas>\r\n      </div>\r\n\r\n      <div className=\"horizontalBreak\"></div>\r\n\r\n      <div className=\"sideBarSectionMiddle\">\r\n        <div>\r\n          <span>\r\n            <b>File: </b>\r\n          </span>\r\n          <span>{fileName}</span>\r\n        </div>\r\n        <div>\r\n          <span>\r\n            <b>Width:</b>\r\n          </span>\r\n          <span>{width}</span>\r\n        </div>\r\n        <div>\r\n          <span>\r\n            <b>Height:</b>\r\n          </span>\r\n          <span>{height}</span>\r\n        </div>\r\n        <div>\r\n          <span>\r\n            <b>Rotate:</b>\r\n          </span>\r\n          <span>\r\n            <input\r\n              id=\"inputAngle\"\r\n              type=\"text\"\r\n              maxLength=\"4\"\r\n              size=\"2\"\r\n              onChange={(e) => setAngle(e.target.value)}\r\n            />\r\n            <input\r\n              type=\"button\"\r\n              className=\"btn btn-blue btn-small\"\r\n              value=\"Apply\"\r\n              onClick={btnApplyOnClick}\r\n            />\r\n          </span>\r\n        </div>\r\n        <div className=\"hoverPointer\">\r\n          {/* htmlFor instead of for thanks to React! */}\r\n          <label htmlFor=\"outlineCheckbox\">Outlined</label>\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"outlineCheckbox\"\r\n            checked={props.outlined}\r\n            onChange={(e) => props.setOutlined(e.target.checked)}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","// Pixel Manipulation for a given ImageData\r\n\r\n/*\r\n# Pixel manipulation reference from MDN\r\n  https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas\r\n  https://github.com/mdn/dom-examples/blob/master/canvas/pixel-manipulation/color-manipulation.js\r\n\r\n# ImageData creation\r\n  give rotated image's width and height as second and third parameter, respectively.\r\n  https://developer.mozilla.org/en-US/docs/Web/API/ImageData/ImageData\r\n    array: Uint8ClampedArray\r\n    width\r\n    height\r\n\r\n# ImageData Pixel Indexing\r\n  reaching to a point (pixel) in ImageData.data array:\r\n    (x,y) = (col, row) --> index = (x + y * width) * 4 --> ImageData.data[index] (successive 4 index are belong to (x, y) in RGBA order)\r\n\r\n# Reference for Point Rotation\r\n  Well Explained Point Rotation in 2D Coordinate System in regards to Origin (0,0)\r\n  https://en.wikipedia.org/wiki/Rotation_(mathematics)\r\n\r\n  positive angle means counter-clockwise rotation\r\n  negative angle means clockwise rotation\r\n  \r\n    theta:  given rotation angle\r\n    (x, y) -->  (x', y'): \r\n      x' = x*cos(theta) - y*sin(theta)\r\n      y' = x*sin(theta) + y*cos(theta)\r\n\r\n  https://stackoverflow.com/questions/2259476/rotating-a-point-about-another-point-2d\r\n  Rotating over Origin (a,b) other than default Origin (0,0)\r\n    (x, y) -->  (x', y'): \r\n      x' = ((x-a)*cos(theta) - (y-b)*sin(theta)) + a\r\n      y' = ((x-a)*sin(theta) + (y-b)*cos(theta)) + b\r\n\r\n  x means column\r\n  y means row\r\n*/\r\n\r\n// rotates given ImageData regarding given angle\r\nfunction rotate(image, angle) {\r\n  // JS Math works with radian\r\n  let radian = convertToRadian(angle);\r\n\r\n  // SAFETY CHECKS\r\n  // if given angle is 0 | 360 then do not rotate\r\n  if (Math.abs(radian) === 0) {\r\n    return image;\r\n  }\r\n  // if given image pixel count is not equal to image.width*image.height then source data is corrupted\r\n  if (image.data.length / 4 !== image.width * image.height) {\r\n    throw new Error(\r\n      \"Provided image is corrupted. Length of pixel array is not consistent with image size!\"\r\n    );\r\n  }\r\n\r\n  // find new size of image to be created\r\n  const sizeDiff = Math.abs(Math.sin(Math.PI / 2 - radian));\r\n  const sinValue = Math.abs(Math.sin(radian));\r\n  let newWidth = Math.round(image.width * sizeDiff + image.height * sinValue);\r\n  let newHeight = Math.round(image.height * sizeDiff + image.width * sinValue);\r\n\r\n  const newPixelArray = new Uint8ClampedArray(newWidth * newHeight * 4);\r\n\r\n  // normalize position after rotate\r\n  const offsetX = Math.round((newWidth - image.width) / 2);\r\n  const offsetY = Math.round((newHeight - image.height) / 2);\r\n\r\n  // We need to rotate our image over center origin\r\n  // see comment section for details about rotation over a specific origin (a, b)\r\n  const originX = Math.round(image.width / 2);\r\n  const originY = Math.round(image.height / 2);\r\n\r\n  // O(M x N) time complexity where M, N are width and height of source image, respectively\r\n  for (let y = 0; y < image.height; ++y) {\r\n    for (let x = 0; x < image.width; ++x) {\r\n      // index calculation (refer to comment section: 'ImageData Pixel Indexing')\r\n      let currIdx = (x + y * image.width) * 4;\r\n\r\n      // X-Prime and Y-Prime calculation (refer to comment section for details)\r\n      let newPoint = rotatePoint(\r\n        x,\r\n        y,\r\n        originX,\r\n        originY,\r\n        radian,\r\n        offsetX,\r\n        offsetY\r\n      );\r\n\r\n      // check if destination is in valid range\r\n      let inRange =\r\n        newPoint.X >= 0 &&\r\n        newPoint.X < newWidth &&\r\n        newPoint.Y >= 0 &&\r\n        newPoint.Y < newHeight;\r\n\r\n      if (inRange) {\r\n        let destIdx = (newPoint.X + newPoint.Y * newWidth) * 4;\r\n        newPixelArray[destIdx + 0] = image.data[currIdx + 0];\r\n        newPixelArray[destIdx + 1] = image.data[currIdx + 1];\r\n        newPixelArray[destIdx + 2] = image.data[currIdx + 2];\r\n        newPixelArray[destIdx + 3] = image.data[currIdx + 3];\r\n      }\r\n      // Else: newPoint is out of range, ignore it\r\n    }\r\n  }\r\n\r\n  return new ImageData(newPixelArray, newWidth, newHeight);\r\n}\r\n\r\n// rotate given point (x, y) according to given origin and radian degree\r\nfunction rotatePoint(x, y, originX, originY, radian, offsetX = 0, offsetY = 0) {\r\n  let xPrime =\r\n    (x - originX) * Math.cos(radian) - (y - originY) * Math.sin(radian);\r\n  xPrime += originX;\r\n  let yPrime =\r\n    (x - originX) * Math.sin(radian) + (y - originY) * Math.cos(radian);\r\n  yPrime += originY;\r\n\r\n  // normalize position if offsets are given\r\n  xPrime += offsetX;\r\n  yPrime += offsetY;\r\n\r\n  // round before set since we are working on 2D coordinate system and\r\n  // point positions are needed as integer to build array by indexing correct elements\r\n  return { X: Math.round(xPrime), Y: Math.round(yPrime) };\r\n}\r\n\r\n// convert given degree to radian\r\nfunction convertToRadian(degree) {\r\n  return degree * (Math.PI / 180);\r\n}\r\n\r\n// inverse given pixel array (added for test purposes)\r\nfunction inverse(pixelArr, length) {\r\n  const invertedArr = new Uint8ClampedArray(length);\r\n  // Iterate through every pixel\r\n  for (let i = 0; i < length; i += 4) {\r\n    invertedArr[i + 0] = 255 - pixelArr[i + 0]; // R value\r\n    invertedArr[i + 1] = 255 - pixelArr[i + 1]; // G value\r\n    invertedArr[i + 2] = 255 - pixelArr[i + 2]; // B value\r\n    invertedArr[i + 3] = 255; // fully opaque:255 -- complete transparent:0\r\n  }\r\n  return invertedArr;\r\n}\r\n\r\nexport { rotate };\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport \"../styles/ImagePanel.css\";\r\nimport { rotate } from \"../scripts/imageRotation\";\r\n\r\n// ImagePanel is designed to work with ImageData Object as separated from other concerns\r\n\r\n// context.getImageData returns ImageData which is one-dimensional array\r\n// containing raw pixel data with RGBA format\r\n// ImageData\r\n//  .width\r\n//  .height\r\n//  .data : Uint8ClampedArray --> each pixel is represented by four one-byte values in RGBA format\r\n//                                data goes left to right then downward throughtout the array\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas\r\n\r\n// to read ImageData\r\n//    var myImageData = ctx.getImageData(left, top, width, height);\r\n\r\n// to write ImageData\r\n//    ctx.putImageData(myImageData, dx, dy);\r\n\r\n// to loop\r\n//    (var i = 0; i < data.length; i += 4)\r\n\r\nconst util = {\r\n  Canvas: null,\r\n  BackupData: null,\r\n  Init: (canvasRef) => {\r\n    util.Canvas = canvasRef;\r\n    util.Clear();\r\n  },\r\n  ReDraw: (imageData) => {\r\n    // imageData is an ImageData Object with three members; width, height, data\r\n    if (imageData) {\r\n      util.BackupData = imageData;\r\n      util.Clear();\r\n      util.Canvas.width = imageData.width;\r\n      util.Canvas.height = imageData.height;\r\n      const ctx = util.Canvas.getContext(\"2d\");\r\n      ctx.putImageData(imageData, 0, 0);\r\n    }\r\n    // Else: defensive - not expected to execute in normal run\r\n  },\r\n  Rotate: (angle, setRenderTime, setRotateAngle) => {\r\n    // to prevent repetitive rotation over already rotated image\r\n    // we will recall our originaly loaded image data on each request\r\n    const ctx = util.Canvas.getContext(\"2d\");\r\n    let data;\r\n    if (util.BackupData) {\r\n      data = util.BackupData;\r\n    } else {\r\n      data = ctx.getImageData(0, 0, util.Canvas.width, util.Canvas.height);\r\n    }\r\n\r\n    const start = performance.now();\r\n    let end = start;\r\n    try {\r\n      let result = rotate(data, angle);\r\n      end = performance.now();\r\n      util.Clear();\r\n      util.Canvas.width = result.width;\r\n      util.Canvas.height = result.height;\r\n      // last two parameters are paddings (start point(x,y) of image), give them as 0\r\n      ctx.putImageData(result, 0, 0);\r\n      setRenderTime(end - start);\r\n      setRotateAngle(angle);\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  },\r\n  Clear: () => {\r\n    // clear canvas\r\n    util.Canvas.getContext(\"2d\").clearRect(\r\n      0,\r\n      0,\r\n      util.Canvas.width,\r\n      util.Canvas.height\r\n    );\r\n  },\r\n  Recall: () => {\r\n    // recall our originaly loaded file, render canvas\r\n    if (util.BackupData) {\r\n      util.ReDraw(util.BackupData);\r\n    }\r\n  },\r\n};\r\n\r\nfunction ImagePanel(props) {\r\n  const [outlined, setOutlined] = useState(true);\r\n  const [renderTime, setRenderTime] = useState(0);\r\n  const [rotateAngle, setRotateAngle] = useState(0);\r\n  // we have to use a ref, which is a reference to the actual canvas DOM element.\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize Util.Canvas, this will be called only once\r\n    util.Init(canvasRef.current);\r\n  }, []);\r\n\r\n  // keep an eye on outlined property for border style of our canvas\r\n  useEffect(() => {\r\n    setOutlined(props.outlined);\r\n  }, [props.outlined]);\r\n\r\n  // Re-draw our newly loaded image\r\n  useEffect(() => {\r\n    util.ReDraw(props.loadedImageData);\r\n  }, [props.loadedImageData]);\r\n\r\n  useEffect(() => {\r\n    if (!props.rotated) {\r\n      util.Rotate(props.rotateAngle, setRenderTime, setRotateAngle);\r\n      props.setRotated(true);\r\n    }\r\n    // Else: angle received as invalid, do nothing\r\n  }, [props]);\r\n\r\n  return (\r\n    <div className=\"imageContainer\">\r\n      <canvas\r\n        id=\"myCanvas\"\r\n        ref={canvasRef}\r\n        style={{ border: outlined ? \"2px solid red\" : \"none\" }}\r\n      />\r\n      <div id=\"renderTime\">Rendered in: {renderTime} miliseconds</div>\r\n      <div id=\"roateDegree\">Rotated: {rotateAngle} degree</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImagePanel;\r\n","import React, { useState } from \"react\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport ImagePanel from \"./ImagePanel\";\r\nimport \"../styles/Content.css\";\r\n\r\nconst defaultFileInfo = { name: \"default.png\", width: 440, height: 250 };\r\n\r\nfunction Content() {\r\n  const [outlined, setOutlined] = useState(true);\r\n  const [loadedImageData, setLoadedImageData] = useState(null);\r\n  const [rotateAngle, setRotateAngle] = useState(null);\r\n  const [rotated, setRotated] = useState(true);\r\n\r\n  // callback for rotate angle setting\r\n  const tryRotate = (angle) => {\r\n    let parsed = parseInt(angle);\r\n    if (!isNaN(parsed) && Number.isInteger(parsed)) {\r\n      setRotateAngle(parsed);\r\n      // reset rotated status so that image panel can handle rotation even if same angle is given\r\n      // so if we are not allowed to rotate over same angle then remove [rotated] state usage completely\r\n      setRotated(false);\r\n    } else {\r\n      alert(\"Given angle is not a valid number!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      {/* this component will set loaded image */}\r\n      <Sidebar\r\n        loadImageData={setLoadedImageData}\r\n        defaultFile={defaultFileInfo}\r\n        tryRotate={tryRotate}\r\n        setOutlined={setOutlined}\r\n        outlined={outlined}\r\n      ></Sidebar>\r\n\r\n      {/* this component will use loaded image */}\r\n      <ImagePanel\r\n        loadedImageData={loadedImageData}\r\n        outlined={outlined}\r\n        rotateAngle={rotateAngle}\r\n        rotated={rotated}\r\n        setRotated={setRotated}\r\n      ></ImagePanel>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Content from \"./components/Content\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Content></Content>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}