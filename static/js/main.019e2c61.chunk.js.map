{"version":3,"sources":["components/Navbar.js","components/Sidebar.js","components/ImagePanel.js","components/Content.js","App.js","index.js"],"names":["Navbar","className","Sidebar","id","type","value","util","Instance","Init","canvasRef","Clear","ReDraw","loadedImage","ctx","getContext","drawImage","width","height","tempImageData","getImageData","data","i","length","putImageData","console","log","clearRect","Rotate","ImagePanel","props","useState","outlined","setOutlined","useRef","useEffect","Outlined","current","LoadedImage","ref","style","border","Content","setLoadedImage","image","Image","onload","src","process","LoadImage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAWeA,MARf,WACE,OACE,qBAAKC,UAAU,SAAf,SACE,kD,aCqBSC,MAxBf,WACE,OACE,sBAAKD,UAAU,gBAAf,UACE,qBAAKA,UAAU,oBAAf,SACE,uBACEE,GAAG,oBACHF,UAAU,qBACVG,KAAK,SACLC,MAAM,mBAIV,qBAAKJ,UAAU,oBAEf,sBAAKA,UAAU,uBAAf,UACE,+BACE,6CAEF,qDCAFK,G,MAAO,CACXC,SAAU,KACVC,KAAM,SAACC,GACLH,EAAKC,SAAWE,EAChBH,EAAKI,SAEPC,OAAQ,SAACC,GAEP,GADAN,EAAKI,QACDE,EAAa,CACf,IAAMC,EAAMP,EAAKC,SAASO,WAAW,MACrCD,EAAIE,UACFH,EACA,EACA,EACAN,EAAKC,SAASS,MACdV,EAAKC,SAASU,QAYhB,IAPA,IAAIC,EAAgBL,EAAIM,aACtB,EACA,EACAb,EAAKC,SAASS,MACdV,EAAKC,SAASU,QAEZG,EAAOF,EAAcE,KAChBC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,GAAK,EACpCD,EAAKC,GAAK,IAAMD,EAAKC,GACrBD,EAAKC,EAAI,GAAK,IAAMD,EAAKC,EAAI,GAC7BD,EAAKC,EAAI,GAAK,IAAMD,EAAKC,EAAI,GAE/BR,EAAIU,aAAaL,EAAe,EAAG,GACnCM,QAAQC,IACNZ,EAAIM,aAAa,EAAG,EAAGb,EAAKC,SAASS,MAAOV,EAAKC,SAASU,WAKhEP,MAAO,WAELJ,EAAKC,SAASO,WAAW,MAAMY,UAC7B,EACA,EACApB,EAAKC,SAASS,MACdV,EAAKC,SAASU,SAGlBU,OAAQ,eAmCKC,MAhCf,SAAoBC,GAAQ,IAAD,EACOC,oBAAS,GADhB,mBAClBC,EADkB,KACRC,EADQ,KAGnBvB,EAAYwB,iBAAO,MAiBzB,OAdAC,qBAAU,WACRF,EAAYH,EAAMM,YACjB,CAACN,EAAMM,WAEVD,qBAAU,WAER5B,EAAKE,KAAKC,EAAU2B,WACnB,IAEHF,qBAAU,WAER5B,EAAKK,OAAOkB,EAAMQ,eACjB,CAACR,EAAMQ,cAGR,sBAAKpC,UAAU,iBAAf,UACE,wBACEE,GAAG,WACHmC,IAAK7B,EACL8B,MAAO,CAAEC,OAAQT,EAAW,gBAAkB,UAEhD,qBAAK5B,GAAG,aAAR,uC,MCtESsC,MAxBf,WAAoB,IAAD,EACeX,oBAAS,GADxB,mBACVC,EADU,aAEqBD,mBAAS,OAF9B,mBAEVlB,EAFU,KAEG8B,EAFH,KAajB,OARAR,qBAAU,WACR,IAAMS,EAAQ,IAAIC,MAClBD,EAAME,OAAS,WACbH,EAAeC,IAEjBA,EAAMG,IAAMC,+BACX,IAGD,sBAAK9C,UAAU,UAAf,UAEE,cAAC,EAAD,CAAS+C,UAAWN,IAGpB,cAAC,EAAD,CAAYL,YAAazB,EAAauB,SAAUJ,QCXvCkB,MATf,WACE,OACE,sBAAKhD,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCHNiD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.019e2c61.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Navbar.css\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <h3>Image Rotator</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"../styles/Sidebar.css\";\r\n\r\nfunction Sidebar() {\r\n  return (\r\n    <div className=\"sidebar h-100\">\r\n      <div className=\"sideBarSectionTop\">\r\n        <input\r\n          id=\"uploadImageButton\"\r\n          className=\"button button-blue\"\r\n          type=\"button\"\r\n          value=\"Upload Image\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"horizontalBreak\"></div>\r\n\r\n      <div className=\"sideBarSectionMiddle\">\r\n        <span>\r\n          <strong>File:</strong>\r\n        </span>\r\n        <span>kitten.jpg</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport \"../styles/ImagePanel.css\";\r\n\r\n// context.getImageData returns ImageData which is one-dimensional array\r\n// containing raw pixel data with RGBA format\r\n// ImageData\r\n//  .width\r\n//  .height\r\n//  .data : Uint8ClampedArray --> each pixel is represented by four one-byte values in RGBA format\r\n//                                data goes left to right then downward throughtout the array\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas\r\n\r\n// to read ImageData\r\n//    var myImageData = ctx.getImageData(left, top, width, height);\r\n\r\n// to write ImageData\r\n//    ctx.putImageData(myImageData, dx, dy);\r\n\r\n// to loop\r\n//    (var i = 0; i < data.length; i += 4)\r\n\r\nconst util = {\r\n  Instance: null,\r\n  Init: (canvasRef) => {\r\n    util.Instance = canvasRef;\r\n    util.Clear();\r\n  },\r\n  ReDraw: (loadedImage) => {\r\n    util.Clear();\r\n    if (loadedImage) {\r\n      const ctx = util.Instance.getContext(\"2d\");\r\n      ctx.drawImage(\r\n        loadedImage,\r\n        0,\r\n        0,\r\n        util.Instance.width,\r\n        util.Instance.height\r\n      );\r\n\r\n      // trying some changes over image data\r\n      // for test purposes\r\n      let tempImageData = ctx.getImageData(\r\n        0,\r\n        0,\r\n        util.Instance.width,\r\n        util.Instance.height\r\n      );\r\n      let data = tempImageData.data;\r\n      for (var i = 0; i < data.length; i += 4) {\r\n        data[i] = 255 - data[i]; // red\r\n        data[i + 1] = 255 - data[i + 1]; // green\r\n        data[i + 2] = 255 - data[i + 2]; // blue\r\n      }\r\n      ctx.putImageData(tempImageData, 0, 0);\r\n      console.log(\r\n        ctx.getImageData(0, 0, util.Instance.width, util.Instance.height)\r\n      );\r\n    }\r\n    // Else: defensive - something went wrong\r\n  },\r\n  Clear: () => {\r\n    // clear canvas\r\n    util.Instance.getContext(\"2d\").clearRect(\r\n      0,\r\n      0,\r\n      util.Instance.width,\r\n      util.Instance.height\r\n    );\r\n  },\r\n  Rotate: () => {},\r\n};\r\n\r\nfunction ImagePanel(props) {\r\n  const [outlined, setOutlined] = useState(true);\r\n  // we have to use a ref, which is a reference to the actual canvas DOM element.\r\n  const canvasRef = useRef(null);\r\n\r\n  // keep an eye on outlined property for border style of our canvas\r\n  useEffect(() => {\r\n    setOutlined(props.Outlined);\r\n  }, [props.Outlined]);\r\n\r\n  useEffect(() => {\r\n    // Initialize Canvas Util Instance, this will be called only once\r\n    util.Init(canvasRef.current);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Re-draw our newly loaded image\r\n    util.ReDraw(props.LoadedImage);\r\n  }, [props.LoadedImage]);\r\n\r\n  return (\r\n    <div className=\"imageContainer\">\r\n      <canvas\r\n        id=\"myCanvas\"\r\n        ref={canvasRef}\r\n        style={{ border: outlined ? \"2px solid red\" : \"none\" }}\r\n      />\r\n      <div id=\"renderTime\">Render Time: HH:MM:SS</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImagePanel;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport ImagePanel from \"./ImagePanel\";\r\nimport \"../styles/Content.css\";\r\n\r\nfunction Content() {\r\n  const [outlined, setOutlined] = useState(true);\r\n  const [loadedImage, setLoadedImage] = useState(null);\r\n\r\n  // On init give default image as image source\r\n  useEffect(() => {\r\n    const image = new Image();\r\n    image.onload = () => {\r\n      setLoadedImage(image);\r\n    };\r\n    image.src = process.env.PUBLIC_URL + \"/default.png\";\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      {/* this component will set loaded image */}\r\n      <Sidebar LoadImage={setLoadedImage}></Sidebar>\r\n\r\n      {/* this component will use loaded image */}\r\n      <ImagePanel LoadedImage={loadedImage} Outlined={outlined}></ImagePanel>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Content from \"./components/Content\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Content></Content>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}